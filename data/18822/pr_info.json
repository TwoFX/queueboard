{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 90,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "YaelDillies"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Prove the vertical line test for monoid homomorphisms/isomorphisms.\n\nLet `f : G → H × I` be a homomorphism to a product of monoids. Assume that `f` is surjective on the\nfirst factor and that the image of `f` intersects every \"vertical line\" `{(h, i) | i : I}` at most\nonce. Then the image of `f` is the graph of some monoid homomorphism `f' : H → I`.\n\nFurthermore, if `f` is also surjective on the second factor and its image intersects every\n\"horizontal line\" `{(h, i) | h : H}` at most once, then `f'` is actually an isomorphism\n`f' : H ≃ I`.\n\n\n---\n<!-- The text above the `---` will become the commit message when your\nPR is merged. Please leave a blank newline before the `---`, otherwise\nGitHub will format the text above it as a title.\n\nFor details on the \"pull request lifecycle\" in mathlib, please see:\nhttps://leanprover-community.github.io/contribute/index.html\n\nIn particular, note that most reviewers will only notice your PR\nif it passes the continuous integration checks.\nPlease ask for help on https://leanprover.zulipchat.com if needed.\n\nTo indicate co-authors, include lines at the bottom of the commit message\n(that is, before the `---`) using the following format:\n\nCo-authored-by: Author Name <author@email.com>\n\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\n(that is, before the `---`) using the following format:\n\nMoves:\n- Vector.* -> Mathlib.Vector.*\n- ...\n\nDeletions:\n- Nat.bit1_add_bit1\n- ...\n\nAny other comments you want to keep out of the PR commit should go\nbelow the `---`, and placed outside this HTML comment, or else they\nwill be invisible to reviewers.\n\nIf this PR depends on other PRs, please list them below this comment,\nusing the following format:\n- [ ] depends on: #abc [optional extra text]\n- [ ] depends on: #xyz [optional extra text]\n\n-->\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\n",
        "changedFiles": 4,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6TCO9u",
              "body": "### PR summary [acabf34d5c](https://github.com/leanprover-community/mathlib4/pull/18822/commits/acabf34d5c93c3271f3309899a7611532079e62b)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n|<details><summary>9 files</summary> `Mathlib.Data.ULift` `Mathlib.Logic.Equiv.Basic` `Mathlib.Data.MLList.Split` `Mathlib.Tactic.Nontriviality.Core` `Mathlib.Data.Prod.Basic` `Mathlib.Algebra.Group.TypeTags` `Mathlib.Algebra.Opposites` `Mathlib.Logic.Nontrivial.Basic` `Mathlib.Tactic.Nontriviality`</details>|1|\n| `Mathlib.Algebra.Group.Graph`|254|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ MonoidHom.exists_mulEquiv_range_eq_graph`\n`+ MonoidHom.exists_range_eq_graph`\n`+ div_def`\n`+ swap_eq_iff_eq_swap`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "createdAt": "2024-11-10T18:24:54Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6TCh2S",
              "body": "What's the motivation for considering homomorphisms from an arbitrary `G`, rather than just inclusions of subgroups? The statement actually only depends on the image of `f` in `H \\times I`, not on `G` and `f`.",
              "createdAt": "2024-11-10T20:53:13Z",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6TCnmz",
              "body": "FWIW, a submonoid version of your first lemma might look like\r\n```lean\r\nlemma Submonoid.eq_graph (G : Submonoid (H × I)) (hf₁ : Surjective (Prod.fst ∘ G.subtype))\r\n    (hf : ∀ g₁ ∈ G, ∀ g₂ ∈ G, g₁.1 = g₂.1 → g₁.2 = g₂.2) :\r\n    ∃ f : H →* I, ∀ x, x ∈ G ↔ f x.1 = x.2 := by\r\n  use\r\n  { toFun := fun h ↦ (hf₁ h).choose.val.snd\r\n    map_one' := hf _ (hf₁ 1).choose.2 1 (one_mem _) (hf₁ 1).choose_spec\r\n    map_mul' := fun h₁ h₂ ↦ by\r\n      have := calc (hf₁ (h₁ * h₂)).choose.val.fst\r\n        _ = h₁ * h₂ := (hf₁ (h₁ * h₂)).choose_spec\r\n        _ = (hf₁ h₁).choose.val.fst * (hf₁ h₂).choose.val.fst := by\r\n          congr 1; exacts [(hf₁ h₁).choose_spec.symm, (hf₁ h₂).choose_spec.symm]\r\n        _ = (((hf₁ h₁).choose * (hf₁ h₂).choose)).val.fst := by\r\n          simp only [coe_subtype, comp_apply, coe_mul, Prod.fst_mul]\r\n      simp only [← Prod.snd_mul]\r\n      refine hf _ (hf₁ _).choose.2 _ ?_ this\r\n      exact mul_mem (hf₁ h₁).choose.2 (hf₁ h₂).choose.2 }\r\n  intro x\r\n  simp only [MonoidHom.coe_mk, OneHom.coe_mk]\r\n  refine ⟨fun hx ↦ hf _ (hf₁ _).choose.2 _ hx (hf₁ _).choose_spec, fun hx₂ ↦ ?_⟩\r\n  exact (Prod.ext (hf₁ x.1).choose_spec hx₂).symm ▸ (hf₁ x.1).choose.2\r\n```",
              "createdAt": "2024-11-10T21:37:20Z",
              "author": {
                "login": "loefflerd"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "acabf34d5c93c3271f3309899a7611532079e62b",
                "additions": 90,
                "deletions": 1,
                "committedDate": "2024-11-10T18:23:47Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHoZ2isg",
                        "name": "Add topic label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767495831/job/32776233650"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHoZ2iaQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767495829/job/32776233577"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHoZ2iiw",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767495832/job/32776233611"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHoZ2WZA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494313/job/32776230500"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHoZ2W8g",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494311/job/32776230642"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHoZ2jAA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767495830/job/32776233728"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHoZ2XQw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494313/job/32776230723"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHoZ2WiA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494311/job/32776230536"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHoZ2isw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767495830/job/32776233651"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHoZ2W5Q",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494313/job/32776230629"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHoZ2XaA",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494311/job/32776230760"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHoZ2Xmw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494313/job/32776230811"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHoaUbqw",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494311/job/32776723371"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHoZ2vGQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/32776236825"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHoZ22wg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=18822&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-11-10T18:24:03Z",
        "deletions": 1,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Group/Graph.lean",
              "additions": 83,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Group/Prod.lean",
              "additions": 2,
              "deletions": 0
            },
            {
              "path": "Mathlib/Data/Prod/Basic.lean",
              "additions": 4,
              "deletions": 1
            }
          ]
        },
        "headRefName": "vertical_line_test_group_hom",
        "headRefOid": "acabf34d5c93c3271f3309899a7611532079e62b",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c6Bb2AO",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": []
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 18822,
        "potentialMergeCommit": {
          "oid": "669f6744a5887d55895970fbd47ea947c1a20d69"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": []
        },
        "reviewThreads": {
          "nodes": []
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            },
            {
              "id": "MDQ6VXNlcjM0Mzk2ODg=",
              "login": "loefflerd"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHoZ2isg",
                "name": "Add topic label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767495831/job/32776233650"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHoZ2iaQ",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767495829/job/32776233577"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHoZ2iiw",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767495832/job/32776233611"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHoZ2WZA",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494313/job/32776230500"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHoZ2W8g",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494311/job/32776230642"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHoZ2jAA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767495830/job/32776233728"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHoZ2XQw",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494313/job/32776230723"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHoZ2WiA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494311/job/32776230536"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHoZ2isw",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767495830/job/32776233651"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHoZ2W5Q",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494313/job/32776230629"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHoZ2XaA",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494311/job/32776230760"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHoZ2Xmw",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494313/job/32776230811"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHoaUbqw",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11767494311/job/32776723371"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHoZ2vGQ",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/32776236825"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHoZ22wg",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=18822&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat: vertical line test for group homomorphisms",
        "updatedAt": "2024-11-10T21:45:50Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/18822",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6dzYvczwAAAAOMekgd",
              "createdAt": "2024-11-10T18:24:13Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6TCO9u",
              "createdAt": "2024-11-10T18:24:54Z",
              "body": "### PR summary [acabf34d5c](https://github.com/leanprover-community/mathlib4/pull/18822/commits/acabf34d5c93c3271f3309899a7611532079e62b)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n|<details><summary>9 files</summary> `Mathlib.Data.ULift` `Mathlib.Logic.Equiv.Basic` `Mathlib.Data.MLList.Split` `Mathlib.Tactic.Nontriviality.Core` `Mathlib.Data.Prod.Basic` `Mathlib.Algebra.Group.TypeTags` `Mathlib.Algebra.Opposites` `Mathlib.Logic.Nontrivial.Basic` `Mathlib.Tactic.Nontriviality`</details>|1|\n| `Mathlib.Algebra.Group.Graph`|254|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ MonoidHom.exists_mulEquiv_range_eq_graph`\n`+ MonoidHom.exists_range_eq_graph`\n`+ div_def`\n`+ swap_eq_iff_eq_swap`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5j2D8i",
              "createdAt": "2024-11-10T18:25:59Z",
              "source": {
                "id": "PR_kwDOFcwZ1c6Bb2KC",
                "title": "feat: Goursat's lemma for subgroups",
                "url": "https://github.com/leanprover-community/mathlib4/pull/18823"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5j2QEt",
              "createdAt": "2024-11-10T18:56:07Z",
              "source": {
                "id": "PR_kwDOFcwZ1c59KakH",
                "title": "feat: Decomposing a submodule of a product",
                "url": "https://github.com/leanprover-community/mathlib4/pull/17308"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6TCh2S",
              "createdAt": "2024-11-10T20:53:13Z",
              "body": "What's the motivation for considering homomorphisms from an arbitrary `G`, rather than just inclusions of subgroups? The statement actually only depends on the image of `f` in `H \\times I`, not on `G` and `f`.",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6TCnmz",
              "createdAt": "2024-11-10T21:37:20Z",
              "body": "FWIW, a submonoid version of your first lemma might look like\r\n```lean\r\nlemma Submonoid.eq_graph (G : Submonoid (H × I)) (hf₁ : Surjective (Prod.fst ∘ G.subtype))\r\n    (hf : ∀ g₁ ∈ G, ∀ g₂ ∈ G, g₁.1 = g₂.1 → g₁.2 = g₂.2) :\r\n    ∃ f : H →* I, ∀ x, x ∈ G ↔ f x.1 = x.2 := by\r\n  use\r\n  { toFun := fun h ↦ (hf₁ h).choose.val.snd\r\n    map_one' := hf _ (hf₁ 1).choose.2 1 (one_mem _) (hf₁ 1).choose_spec\r\n    map_mul' := fun h₁ h₂ ↦ by\r\n      have := calc (hf₁ (h₁ * h₂)).choose.val.fst\r\n        _ = h₁ * h₂ := (hf₁ (h₁ * h₂)).choose_spec\r\n        _ = (hf₁ h₁).choose.val.fst * (hf₁ h₂).choose.val.fst := by\r\n          congr 1; exacts [(hf₁ h₁).choose_spec.symm, (hf₁ h₂).choose_spec.symm]\r\n        _ = (((hf₁ h₁).choose * (hf₁ h₂).choose)).val.fst := by\r\n          simp only [coe_subtype, comp_apply, coe_mul, Prod.fst_mul]\r\n      simp only [← Prod.snd_mul]\r\n      refine hf _ (hf₁ _).choose.2 _ ?_ this\r\n      exact mul_mem (hf₁ h₁).choose.2 (hf₁ h₂).choose.2 }\r\n  intro x\r\n  simp only [MonoidHom.coe_mk, OneHom.coe_mk]\r\n  refine ⟨fun hx ↦ hf _ (hf₁ _).choose.2 _ hx (hf₁ _).choose_spec, fun hx₂ ↦ ?_⟩\r\n  exact (Prod.ext (hf₁ x.1).choose_spec hx₂).symm ▸ (hf₁ x.1).choose.2\r\n```",
              "author": {
                "login": "loefflerd"
              }
            }
          ]
        }
      }
    }
  }
}
