{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 113,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "apnelson1"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "We continue to build the API for matroid closure by defining a predicate `Matroid.Spanning` stating that a set `X` spans the ground set, or equivalently that `X` contains a base.\r\n\r\nWe also state a couple of dozen API lemmas for this notion. \r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> Mathlib.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6Q_t7X",
              "body": "### PR summary [3b187d20b2](https://github.com/leanprover-community/mathlib4/pull/18129/commits/3b187d20b2e96bec70d4782d6a626c04fa6f90f2)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ Base.spanning`\n`+ Base.superset_spanning`\n`+ Coindep.closure_compl`\n`+ Coindep.compl_spanning`\n`+ Indep.base_of_spanning`\n`+ Spanning`\n`+ Spanning.base_of_indep`\n`+ Spanning.closure_superset_eq`\n`+ Spanning.exists_base_subset`\n`+ Spanning.superset`\n`+ Spanning.union_left`\n`+ Spanning.union_right`\n`+ closure_spanning_iff`\n`+ coindep_iff_closure_compl_eq_ground`\n`+ coindep_iff_compl_spanning`\n`+ ext_spanning`\n`+ ground_spanning`\n`+ not_spanning_iff_closure`\n`+ spanning_iff_closure`\n`+ spanning_iff_compl_coindep`\n`+ spanning_iff_exists_base_subset`\n`+ spanning_iff_exists_base_subset'`\n`+ spanning_iff_ground_subset_closure`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "createdAt": "2024-10-23T15:26:35Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6RKJ0V",
              "body": "> Thanks!\r\n> \r\n> My only feedback here is on naming. I see you want to use `spanning` as a suffix â€” by default names from predicates are prefixes, but if you document in the matroid naming conventions that `spanning` is a suffix there probably could be an exception here. For example, `injective` has special treatment as a suffix.\r\n\r\nI do think it sounds better as a suffix. But I wasn't aware of the prefix convention, and I've unknowingly already violated it with `Indep`, `Dep`, `Base`, `Basis` etc. I should probably document this fact. I will add a note in this PR that `Spanning` is used as a suffix, and make another PR where I document the suffix naming convention for the other terms. ",
              "createdAt": "2024-10-24T13:51:28Z",
              "author": {
                "login": "apnelson1"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "3b187d20b2e96bec70d4782d6a626c04fa6f90f2",
                "additions": 113,
                "deletions": 0,
                "committedDate": "2024-10-23T15:23:10Z",
                "author": {
                  "name": "Peter Nelson",
                  "email": "71660771+apnelson1@users.noreply.github.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcSMQQA",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11484636699/job/31962894400"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcSMMVA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11484636700/job/31962893396"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcSMIfw",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11484636693/job/31962892415"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcNXZiw",
                        "name": "Add topic label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483129101/job/31957834123"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcNXZqA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483129094/job/31957834152"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcNXZpw",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483129111/job/31957834151"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcNOEaw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083102/job/31957681259"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcNOEhA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083107/job/31957681284"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcNXcCg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483129099/job/31957834762"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcSMKnA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11484636699/job/31962892956"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcNOImg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083102/job/31957682330"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcNOHqQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083107/job/31957682089"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcNXavw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483129099/job/31957834431"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcNOGjA",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083102/job/31957681804"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcNOGNQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083107/job/31957681717"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcNOKMQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083102/job/31957682737"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcNohAg",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083107/job/31958114562"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcNX1qg",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31957841322"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcNaI5A",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=18129&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-10-23T15:25:46Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Data/Matroid/Closure.lean",
              "additions": 113,
              "deletions": 0
            }
          ]
        },
        "headRefName": "matroid_spanning",
        "headRefOid": "3b187d20b2e96bec70d4782d6a626c04fa6f90f2",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5_owD3",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABtNO8rw",
              "color": "33DBEC",
              "name": "t-data"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6Oa_-d",
              "body": "Thanks!\r\n\r\nMy only feedback here is on naming. I see you want to use `spanning` as a suffix â€” by default names from predicates are prefixes, but if you document in the matroid naming conventions that `spanning` is a suffix there probably could be an exception here. For example, `injective` has special treatment as a suffix.",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2024-10-23T17:00:11Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 18129,
        "potentialMergeCommit": {
          "oid": "1db252fb61acc1c8d43f2cd6663bfb7d95871c45"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6Oa_-d",
              "body": "Thanks!\r\n\r\nMy only feedback here is on naming. I see you want to use `spanning` as a suffix â€” by default names from predicates are prefixes, but if you document in the matroid naming conventions that `spanning` is a suffix there probably could be an exception here. For example, `injective` has special treatment as a suffix.",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2024-10-23T17:00:11Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5sEv3R",
                    "body": "Weak suggestion, since I could see someone searching for `closure_eq`\r\n```suggestion\r\nlemma spanning_iff_closure_eq (hS : S âŠ† M.E := by aesop_mat) : M.Spanning S â†” M.closure S = M.E := by\r\n```",
                    "createdAt": "2024-10-23T16:53:35Z",
                    "author": {
                      "login": "kmill"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5sEv-B",
                    "body": "```suggestion\r\nlemma spanning_closure_iff (hS : S âŠ† M.E := by aesop_mat) :\r\n```",
                    "createdAt": "2024-10-23T16:53:56Z",
                    "author": {
                      "login": "kmill"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5sEwPo",
                    "body": "```suggestion\r\nlemma not_spanning_iff_closure_ssubset (hS : S âŠ† M.E := by aesop_mat) :\r\n```",
                    "createdAt": "2024-10-23T16:54:43Z",
                    "author": {
                      "login": "kmill"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5sEwqi",
                    "body": "I'm not sure what the best name is here, but I think this is what the conventions would suggest:\r\n```suggestion\r\nlemma Spanning.closure_eq_of_superset (hS : M.Spanning S) (hST : S âŠ† T) : M.closure T = M.E := by\r\n```",
                    "createdAt": "2024-10-23T16:56:03Z",
                    "author": {
                      "login": "kmill"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5sEw2I",
                    "body": "```suggestion\r\nlemma spanning_ground (M : Matroid Î±) : M.Spanning M.E :=\r\n```",
                    "createdAt": "2024-10-23T16:56:38Z",
                    "author": {
                      "login": "kmill"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5sEw-D",
                    "body": "```suggestion\r\nlemma Base.spanning_of_superset (hB : M.Base B) (hBX : B âŠ† X) (hX : X âŠ† M.E := by aesop_mat) :\r\n```",
                    "createdAt": "2024-10-23T16:57:00Z",
                    "author": {
                      "login": "kmill"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjcxNjYwNzcx",
              "login": "apnelson1"
            },
            {
              "id": "MDQ6VXNlcjIzNTMwNw==",
              "login": "kmill"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcSMQQA",
                "name": "Add ready-to-merge label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11484636699/job/31962894400"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcSMMVA",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11484636700/job/31962893396"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcSMIfw",
                "name": "Fix style issues from lint",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11484636693/job/31962892415"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcNXZiw",
                "name": "Add topic label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483129101/job/31957834123"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcNXZqA",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483129094/job/31957834152"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcNXZpw",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483129111/job/31957834151"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcNOEaw",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083102/job/31957681259"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcNOEhA",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083107/job/31957681284"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcNXcCg",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483129099/job/31957834762"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcSMKnA",
                "name": "Add delegated label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11484636699/job/31962892956"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcNOImg",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083102/job/31957682330"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcNOHqQ",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083107/job/31957682089"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcNXavw",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483129099/job/31957834431"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcNOGjA",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083102/job/31957681804"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcNOGNQ",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083107/job/31957681717"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcNOKMQ",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083102/job/31957682737"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcNohAg",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11483083107/job/31958114562"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcNX1qg",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31957841322"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHcNaI5A",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=18129&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat(Data/Matroid/Closure): Spanning sets in matroids",
        "updatedAt": "2024-10-24T13:51:30Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/18129",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6bgnCCzwAAAANzYgz_",
              "createdAt": "2024-10-23T15:25:59Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABtNO8rw",
                "name": "t-data"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Q_t7X",
              "createdAt": "2024-10-23T15:26:35Z",
              "body": "### PR summary [3b187d20b2](https://github.com/leanprover-community/mathlib4/pull/18129/commits/3b187d20b2e96bec70d4782d6a626c04fa6f90f2)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ Base.spanning`\n`+ Base.superset_spanning`\n`+ Coindep.closure_compl`\n`+ Coindep.compl_spanning`\n`+ Indep.base_of_spanning`\n`+ Spanning`\n`+ Spanning.base_of_indep`\n`+ Spanning.closure_superset_eq`\n`+ Spanning.exists_base_subset`\n`+ Spanning.superset`\n`+ Spanning.union_left`\n`+ Spanning.union_right`\n`+ closure_spanning_iff`\n`+ coindep_iff_closure_compl_eq_ground`\n`+ coindep_iff_compl_spanning`\n`+ ext_spanning`\n`+ ground_spanning`\n`+ not_spanning_iff_closure`\n`+ spanning_iff_closure`\n`+ spanning_iff_compl_coindep`\n`+ spanning_iff_exists_base_subset`\n`+ spanning_iff_exists_base_subset'`\n`+ spanning_iff_ground_subset_closure`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Oa_-d",
              "createdAt": "2024-10-23T16:53:35Z",
              "body": "Thanks!\r\n\r\nMy only feedback here is on naming. I see you want to use `spanning` as a suffix â€” by default names from predicates are prefixes, but if you document in the matroid naming conventions that `spanning` is a suffix there probably could be an exception here. For example, `injective` has special treatment as a suffix.",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6RKJ0V",
              "createdAt": "2024-10-24T13:51:28Z",
              "body": "> Thanks!\r\n> \r\n> My only feedback here is on naming. I see you want to use `spanning` as a suffix â€” by default names from predicates are prefixes, but if you document in the matroid naming conventions that `spanning` is a suffix there probably could be an exception here. For example, `injective` has special treatment as a suffix.\r\n\r\nI do think it sounds better as a suffix. But I wasn't aware of the prefix convention, and I've unknowingly already violated it with `Indep`, `Dep`, `Base`, `Basis` etc. I should probably document this fact. I will add a note in this PR that `Spanning` is used as a suffix, and make another PR where I document the suffix naming convention for the other terms. ",
              "author": {
                "login": "apnelson1"
              }
            }
          ]
        }
      }
    }
  }
}
